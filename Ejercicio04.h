//Creado por Juan Carlos Muñoz Cruz el dia 22/06/2021

#ifndef EJERCICIO04-H
#define EJERCICIO04-H

#include <stdbool.h>    //BIBLIOTECA PARA USAR BOOLEANOS

struct _DATA{   //ESTRUCTURA PARA LA INFORMACIÓN DEL NODO
    int x;      //VARIABLE DE INFORMACIÓN DE LA ESTRUCTURA
};
typedef struct _DATA DATA;     //ALIAS ESTRUCTURA DE LA INFORMACIÓN


typedef struct _node NODE;      //ALIAS ESTRUCTURA DEL NODO
struct _node{       //ESTRUCTURA DE NODO
    DATA info;      //VARIABLE TIPO STRUCT DE LA INFORMACIÓN DEL NODO
    NODE *siguiente;    //VARIABLE TIPO APUNTADOR AL SIGUIENTE NODO
};


struct _list{   //STRUCTURA DE LA LISTA
    NODE *head;     //APUNTADOR A LA CABEZA
    NODE *tail;     //APUNTADOR A LA COLA
    int num;    //CONTADOR DE LA LISTA
};
typedef struct _list LIST;  //ALIAS DE LA VARIABLE ESTRUCTURA LISTA

NODE *new_node(DATA info);  //PROTOTIPO CREAR UN NUEVO NODO, RETORNA UN APUNTADOR TIPO NODO, RECIVE UN DATA CON LA INFORMACIÓN DEL NODO
void free_node(NODE *n);    //PROTOTIPO PARA LIBERAR MEMORIA DE UN NODO, RECIBE UN APUNTADOR TIPO NODE

LIST* new_list();   //PROPOTIPO PARA CREAR UNA NUEVA LISTA, RETORNA UN APUNTADOR TIPO LISTA, NO RECIVE NINGUN PARÁMETRO
void free_list(LIST *l);    //PROTOTIPO PARA LIBERAR UNA LISTA, RECIVE UN APUNTADOR TIPO LIST

bool insertar_inicio(LIST *l, DATA info);   //PROTOTIPO PARA INSERTAR UN NODO AL INICIO DE LA LISTA, RECIVE UN APUNTADOR TIPO LIST Y UN DATA

bool es_vacia(LIST *l);     //PROTOTIPO PARA DETERMINAR SI LA LISTA ES VACIA, RECIVE UN APUNTADOR TIPO LIST
void empty_list(LIST *l);   //PROTOTIPO PARA VACIAR LA LISTA, RECIVE UN APUNTADOR TIPO LIST
void imprimir_lista(LIST *l);   //PROTOTIPO PARA IMPRIMIR LISTA, RECIVE UN APUNTADOR TIPO LIST

#endif // EJERCICIO04
